buildscript {
	dependencies {
		classpath("org.flywaydb:flyway-database-postgresql:10.7.2")
	}
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id("org.jooq.jooq-codegen-gradle") version  "3.19.18"
	id("org.flywaydb.flyway") version "10.10.0"
}

group = 'com.tatswata'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation("org.jooq:jooq-meta")
	implementation("org.jooq:jooq-codegen")
	implementation("org.jooq:jooq-postgres-extensions:3.19.11")
	jooqCodegen("org.postgresql:postgresql")
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

sourceSets.main {
	java.srcDirs("build/generated-sources/jooq")
}

jooq {
	configuration {

		jdbc {
			driver = "org.postgresql.Driver"
			url = "jdbc:postgresql://localhost:5432/bookdatabase"
			user = "bookmanagementapi"
			password = "password"
		}
		generator {
			database {
				name = "org.jooq.meta.postgres.PostgresDatabase"
				inputSchema = "public"
				includes = ".*"
				excludes = "flyway_schema_history"
			}

			target {
				packageName = "com.tatswata.bookmanagement.db"
			}
		}
	}
}

flyway {
	driver = "org.postgresql.Driver"
	url = "jdbc:postgresql://localhost:5432/bookdatabase"
	user = "bookmanagementapi"
	password = "password"
	schemas = ["public"]
}

tasks.named('test') {
	useJUnitPlatform()
}